{{#if d3el}}

  {{!-- the transition property is bound to data because otherwise transitions are lost when data changes --}}

  {{#with (hash
    horizontalScale=(or horizontal-scale (band-scale
      (append 0 width)
      (append 0 height)
    ))
    verticalScale=(or vertical-scale (linear-scale
      (append 0 height)
      (append 0 width)
    ))
    tickFormat=(or tick-format '%Y-%m-%d')

    transition=(or transition (ember-sparkles/transition duration=1000 data=data))
    inputAccessor=(or input-accessor (d3-get 'ts'))
    outputAccessor=(or output-accessor (d3-get 'value'))
    ) as |options|}}

  {{!-- create x axis --}}

  {{ember-d3-helpers/invoke (pipe
    (d3-append 'g')
    (d3-attr 'class' 'x axis')
    (d3-attr 'transform' (i 'translate(0,${h})' h=height))
    ) d3el
  }}

  {{!-- select and call x axis function on d3 selection --}}

  {{#with (ember-sparkles/axis options.horizontalScale position='bottom' tickFormat='%Y-%m-%d') as |axis|}}
    {{ember-d3-helpers/invoke (pipe
      (d3-select-all '.x.axis')
      (if with-transition (d3-transition options.transition) (d3-noop))
      (d3-call axis)
      ) d3el
    }}
  {{/with}}

  {{ember-d3-helpers/invoke (pipe
    (d3-append 'g')
    (d3-attr 'class' 'y axis')
    ) d3el
  }}

  {{#with (ember-sparkles/axis options.verticalScale position='left' ticks=ticks) as |axis|}}
    {{ember-d3-helpers/invoke (pipe
      (d3-select-all '.y.axis')
      (if with-transition (d3-transition options.transition) (d3-noop))
      (d3-call axis)
      ) d3el
    }}
  {{/with}}

  {{#with (compute
    (pipe
      (d3-select-all 'rect')
      (d3-data data)
    ) d3el) as |bars|}}

    {{!-- enter / merge --}}
    {{ember-d3-helpers/invoke (pipe
      (d3-enter (pipe
        (d3-append 'rect')
        (d3-attr 'class' 'bar')
        (d3-attr 'y' height)
        (d3-attr 'x' width)
        (d3-attr 'fill' 'steelblue')
        (d3-style 'opacity' 0)
      (d3-merge bars)
        (if with-transition (d3-transition options.transition) (d3-noop))
        (d3-style 'opacity' 1)
        (d3-attr 'x' (pipe options.inputAccessor options.horizontalScale))
        (d3-attr 'width' options.horizontalScale.bandwidth)
        (d3-attr 'y' (pipe options.outputAccessor options.verticalScale))
        (d3-attr 'height' (pipe options.outputAccessor options.verticalScale (bar-height height)))
      ))) bars
    }}

    {{!-- exit --}}
    {{ember-d3-helpers/invoke (pipe
      (d3-exit (pipe
        (if with-transition (d3-transition options.transition) (d3-noop))
        (d3-attr 'fill' 'green')
        (d3-style 'opacity' 0)
        (d3-attr 'height' 0)
        (d3-attr 'y' height)
        (d3-remove))
      )) bars
    }}
  {{/with}}

{{/with}}

{{/if}}
